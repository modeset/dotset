# Native CoffeeScript
# -----------------------------------------------------------------------------
snippet var
	${1:name} = ${2:value}${3}
snippet vp
	${1:name}: ${2:value}${3}
snippet f
	${1:name} = -> ${2}
snippet fa
	${1:name} = (${2:args}) -> ${3}
snippet fb
	${1:name} = => ${2}
snippet fba
	${1:name} = (${2:args}) => ${3}
snippet m
	${1:name}: -> ${2}
snippet ma
	${1:name}: (${2:args}) -> ${3}
snippet mb
	${1:name}: => ${2}
snippet mba
	${1:name}: (${2:args}) => ${3}
snippet proto
	${1:class_name}::${2:method_name} = -> ${3}
snippet protoa
	${1:class_name}::${2:method_name} = (${3:args}) -> ${4}
snippet class
	class ${1:name}
		constructor: (${2:args}) -> ${3}
snippet extend
	class ${1:name} extends ${2:parent}
		constructor: (${3:args}) ->
			super
			${4}
snippet new
	${1:instance} = new ${2:class}
snippet if
	if ${1:condition}
		${2}
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
snippet ifeif
	if ${1:condition}
		${2}
	else if ${3:condition}
		${4}
	else
		${5}
snippet ter
	${1:prop} = if ${2:condition} then ${3:a} else ${4:b}
snippet soak
	${1:prop} = ${2:exists} ? ${3:default}
snippet switch
	switch ${1:expression}
		when ${2:case} then ${3:execute}
		else ${4:default}
snippet case
	when ${1:case} then ${2:execute}
snippet for
	for ${1:value} in ${2:array}
snippet fordo
	for ${1:value} in ${2:array}
		do ($1) ->
			${3:# body..}
snippet fore
	for ${1:key}, ${2:value} of ${3:object}
		"#{$1} is #{$2}"
snippet foreo
	for own ${1:key}, ${2:value} of ${3:object}
		"#{$1} is #{$2}"
snippet lc
	${1:prop} = (${2:value} for $2 in ${3:array})
snippet elc
	${1:fn} ${2:value} for $2 in ${3:array}
snippet oc
	${1:prop} = for ${2:key}, ${3:value} of ${4:object}
		"#{$2} is #{$3}"
snippet eoc
	${1:fn} ${2:key}, ${3:value} for $2, $3 of ${4:object}
snippet do
	do (${1:iterator}) ->
		${2:# body..}
snippet while
	${1:fn} while ${2:true}
snippet unless
	${1:fn} unless ${2:false}
snippet hr
	# -----------------------------------------------------------------------------
snippet #
	#{${1:prop}}${2}
snippet log
	console.log ${1}
snippet :error
	console.error ${1}
snippet trace
	console.log "${1:var} is #{$1}"${2}
snippet throw
	throw new Error '${1:e}'
snippet try
	try
		${1}
	catch err
		${2}
snippet timeout
	setTimeout(( =>
		${2}
	), ${1:ms})
snippet interval
	setInterval(( ->
		${2}
	), ${1:ms})
snippet hdoc
	${1:prop} = """
		${2:# contents}
		"""
