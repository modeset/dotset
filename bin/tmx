#!/bin/bash

# modified script based on:
# https://mutelight.org/practical-tmux
#

trim() { echo $1; }

print_help() {
  cat << EOF


A wrapper around tmux.
------------------------------------------------------------------
Usage: tmx foo

Opens a tmux session named foo with a session in the /tmp dir
of the same name. If a session with that name is already available,
attempts to attach to that session.

EOF
}

make_session(){
  echo "Launching tmux base session $base_session ..."
  echo "session will be stored in /tmp/$base_session"
  tmux -S /tmp/$base_session new-session -s $base_session
  # change permissions so others users can attach
  chmod 777 /tmp/$base_session
}

if [[ -z "$1" ]]; then
  echo "Specify session name as the first argument or 'tmx help'"
  exit
fi

if [[ "$1" == "help" ]]; then
  print_help
  exit
fi

if [[ "$1" == "ls" ]]; then
  tmux ls
  exit
fi

base_session="$1"

tmux_nb=$(trim `ls -la /tmp/ | egrep "$base_session" | wc -l`)
if [[ "$tmux_nb" == "0" ]]; then
    make_session
else
  # if you don't call attach it will clobber the session
  # you probably meant to attach to it.
  # TODO: if someone kills the windows, the session file remains
  # so when you try to detach it says there are 'no sessions'
  # and exits. need to figure out a nice way to catch that
  # error status and rm the bad session and make a new one.
  echo "attaching to current tmux session $base_session..."
  tmux -S /tmp/$base_session attach
fi
