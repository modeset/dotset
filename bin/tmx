#!/bin/bash

# modified script based on:
# https://mutelight.org/practical-tmux
#

trim() { echo $1; }

print_help() {
  cat << EOF


A wrapper around tmux.
------------------------------------------------------------------
Usage: tmx foo

Opens a tmux session named foo with a session in the /tmp dir
of the same name. If a session with that name is already available,
attempts to attach to that session.

EOF
}

make_session(){
  echo "Launching tmux base session $base_session ..."
  echo "session will be stored in /tmp/$base_session"
  tmux -S /tmp/$base_session new-session -s $base_session
  # change permissions so others users can attach
  chmod 777 /tmp/$base_session
}

if [[ -z "$1" ]]; then
  echo "Specify session name as the first argument or 'tmx help'"
  exit
fi

if [[ "$1" == "help" ]]; then
  print_help
  exit
fi

if [[ "$1" == "ls" ]]; then
  tmux ls
  exit
fi

base_session="$1"

tmux_nb=$(trim `ls -la /tmp/ | egrep "$base_session" | wc -l`)
if [[ "$tmux_nb" == "0" ]]; then
    make_session
else
  # if you don't call attach when providing the -S flag
  # it will clobber the session even though you probably meant
  # to attach to it. The following just makes the most common
  # intent the default.
  # TODO: the call to attach still outputs to stdin, piping the
  # following command to /dev/null doesn't seem to be working so
  # you still see 'no sessions' if the attach fails.
  cmd=`tmux -S /tmp/$base_session attach`
  if [ echo $cmd ]; then
    echo "a tmux session file exists name $base_session but it is dead."
    echo "creating a new one of the same name and killing the old one"
    rm /tmp/$base_session && make_session
  fi
fi
