#!/bin/bash

set -e
ARGS=(install update uninstall backup weekly help)
CWD=`pwd`


## Public API
# -----------------------------------------------------------------------------

#/ install      Installs dotfiles, vimfiles, and various executables
install() {
  backup
  printf "%sInstalling:\n"
  install_dots
  install_directory bin
  install_pathogen
  install_bundles
  install_vimfiles colors .vim
  install_vimfiles doc .txt
  install_vimfiles snippets .snippets
  install_vimtmps
  printf "%s\nThanks for flying dotset!\n"
}


#/ update       Removes existing setup and installs fresh from git
update() {
  check_for_dirty_repo
  uninstall
  git pull --rebase
  install
}

#/ uninstall    Restores original dot files (or latest backup)
uninstall() {
  if [[ ! -d $CWD/backup ]]; then
    while true; do
      echo "No backup found for replacement, continuing will blow away existing dot files."
      read -p "Do you wish to continue? (y/n) " yn
      case $yn in
        [Yy]* ) break;;
        [Nn]* ) exit 0;;
        * ) echo "Please answer yes or no.";;
      esac
    done
  fi
  printf "%sUninstalling:\n"
  uninstall_dots
  uninstall_directory bin
  uninstall_directory vim
  restore_dots
  restore_directory bin
  restore_directory vim
  rm -rf $CWD/backup
}

#/ backup       Backup the existing dot files from the $HOME directory
backup() {
  if [[ -d $CWD/backup ]]; then
    printf "%sBackup exists, skipping.\n"
  else
    printf "%sCreating backup:\n"
    mkdir -p $CWD/backup
    backup_dots
    backup_directory bin
    backup_directory vim
  fi
}

#/ weekly       Runs a weekly update script to keep your machine pure
weekly() {
  printf "%sRunning software update..\n"
  sudo softwareupdate -l
  sudo softwareupdate -i -a
  printf "%sUpdating homebrew..\n"
  brew update
  brew outdated
  brew upgrade `brew outdated`
  brew cleanup
  brew prune
  printf "%sUpdating pow..\n"
  curl get.pow.cx | sh
  printf "%sUpdating gems..\n"
  gem update
  gem cleanup
  printf "%sUpdating global npm packages..\n"
  npm update -g
  printf "%sUpdating dotset..\n"
  ./dotset update
  printf "%s-----------------------------------------------------------------\n"
  printf "%sRun any migrations and follow instructions from weekly update.\n"
  printf "%s-----------------------------------------------------------------\n"
}

#/ help         Print this message
help() {
  cat<<EOF
Usage: ./$(basename "$0") [${ARGS[@]}]

Commands:
$(print_usage)

- You are a special butterfly and Mode Set loves you.
EOF
}

## Internal
# -----------------------------------------------------------------------------

initialize() {
  DOTS=$(get_dots)
}

# Symlink all of the files within a directory($1) based on filetype($2)
get_dots() {
  local files=()
  for file in `find $CWD/dots \( ! -regex '.*/\..*' \) -type f -maxdepth 1` ; do
    files+=(`basename $file`)
  done
  echo ${files[@]}
}

install_dots() {
  for dot in $DOTS ; do
    printf "%2slinking $dot file.\n"
    ln -sf $CWD/dots/$dot $HOME/.$dot
  done
}

install_directory() {
  printf "%2slinking $1/ directory.\n"
  ln -sf $CWD/$1 $HOME/.$1
}

# Updates the pathogen bundle
install_pathogen() {
  printf "%sInstalling pathogen:\n"
  mkdir -p $HOME/.vim/autoload
  curl -o $HOME/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim
}

# Clone the bundle repositories into the `.vim/bundle` directory
install_bundles() {
  printf "%sInstalling bundles:\n"
  mkdir -p $HOME/.vim/bundle
  local bundles=$(get_bundle_list)
  cd $HOME/.vim/bundle/
  for repo in $bundles; do
    git clone $repo
  done
  cd $CWD
}

# Grab the global bundles and user bundles if they exist
get_bundle_list() {
  if [[ -f $CWD/config/bundles.local.txt ]]; then
    local bundles=$(cat $CWD/config/bundles.txt $CWD/config/bundles.local.txt)
  else
    local bundles=$(cat $CWD/config/bundles.txt)
  fi
  echo $bundles
}

# Symlink all of the files within a directory($1) based on filetype($2)
install_vimfiles() {
  printf "%sLinking $1:"
  mkdir -p $HOME/.vim/$1
  for file in `find $CWD/vim/$1 -maxdepth 1 -iname "*$2"`; do
    ln -sf "$file" "$HOME/.vim/$1/"`basename $file`
    printf "%s."
  done
  printf "%s done.\n"
}

# Create temporary directories for vim and plugin storage
install_vimtmps() {
  printf "%sCreating .vim/tmp directories:..."
  mkdir -p $HOME/.vim/tmp/swap
  mkdir -p $HOME/.vim/tmp/yankring
  mkdir -p $HOME/.vim/tmp/ctrlp
  printf "%s done.\n"
}

uninstall_dots() {
  for dot in $DOTS ; do
    if [[ -f $HOME/.$dot ]]; then
      printf "%2sremoving .$dot file.\n"
      rm $HOME/.$dot
    fi
  done
}

uninstall_directory() {
  if [[ -d $HOME/.$1 ]]; then
    printf "%2sremoving .$1/ directory.\n"
    rm -rf $HOME/.$1
  fi
}

restore_dots() {
  for dot in $DOTS; do
    if [[ -f $CWD/backup/dots/$dot ]]; then
      printf "%2srestoring .$dot file.\n"
      mv $CWD/backup/dots/$dot $HOME/.$dot
    fi
  done
}

restore_directory() {
  if [[ -d $CWD/backup/$1 ]]; then
    printf "%2srestoring .$1/ directory.\n"
    mv $CWD/backup/$1 $HOME/.$1
  fi
}

backup_dots() {
  mkdir -p $CWD/backup/dots
  for dot in $DOTS; do
    if [[ -f $HOME/.$dot ]]; then
      printf "%2sbacking up .$dot file.\n"
      cp $HOME/.$dot $CWD/backup/dots/$dot
      rm $HOME/.$dot
    fi
  done
}

backup_directory() {
  if [[ -d $HOME/.$1 ]]; then
    printf "%2sbacking up .$1/ directory.\n"
    cp -rf $HOME/.$1/ $CWD/backup/$1
    rm -rf $HOME/.$1
  fi
}

# Before updating, make sure the git directory is clean
check_for_dirty_repo() {
  if [ "$(git diff --exit-code)" ]
  then
    printf "%sDetected unstaged changes, please stage before continuing!\n"
    exit 0
  fi
}

# Get usage from the public api comments starting with `#/`
print_usage() {
  cat $(basename "$0") | grep '^#\/' | sed "s/#\///g" | while read line; do
    printf "%2s$line\n"
  done
}

## Initialization
# -----------------------------------------------------------------------------
# See if a valid argument is passed and call it...
if [[ $1 != "" ]]; then
  for fn in "${ARGS[@]}"; do
    if [[ "$fn" == $1 ]]; then
      initialize
      $fn
      exit 0
    fi
  done
fi

# ...otherwise barf out a help warning
printf "%sNot sure what to do here so calling for help!\n\n"
help
exit 0

